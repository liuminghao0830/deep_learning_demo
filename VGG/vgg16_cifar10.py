# -*- coding: utf-8 -*-
"""vgg16_cifar10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l9j9uKSCGFziuxSmIoKjWxnfxLy6j5mZ
"""

import numpy as np

import keras
from keras import optimizers
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout, Flatten
from keras.layers import Conv2D
from keras.layers import MaxPooling2D

from keras.datasets import cifar10

def vgg16(input_shape, num_classes):
  
  model = Sequential()
  
  model.add(Conv2D(64, (3, 3), input_shape=input_shape, padding='same', 
                   activation='relu', kernel_initializer='he_normal'))
  model.add(Conv2D(64, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
  model.add(Conv2D(128, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(Conv2D(128, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
  model.add(Conv2D(256, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(Conv2D(256, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(Conv2D(256, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
  model.add(Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
  model.add(Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(Conv2D(512, (3, 3), activation='relu', padding='same', kernel_initializer='he_normal'))
  model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
  model.add(Flatten())
  model.add(Dense(4096, activation='relu', kernel_initializer='he_normal'))
  model.add(Dense(4096, activation='relu', kernel_initializer='he_normal'))
  model.add(Dense(num_classes, activation='softmax', kernel_initializer='he_normal'))
  
  return model

# Load the CIFAR10 data.
num_classes = 10
(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# Input image dimensions.
input_shape = x_train.shape[1:]

# Normalize data.
x_train = x_train.astype('float32') / 255
x_test = x_test.astype('float32') / 255

# subtract pixel mean
x_train_mean = np.mean(x_train, axis=0)
x_train -= x_train_mean
x_test -= x_train_mean

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')
print('y_train shape:', y_train.shape)

vgg16_model = vgg16(input_shape=input_shape, num_classes=num_classes)
vgg16_model.summary()

adam = optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-8)
vgg16_model.compile(optimizer=adam, loss='categorical_crossentropy', metrics=['accuracy'])

vgg16_model.fit(x_train, y_train, epochs = 10, batch_size = 32)